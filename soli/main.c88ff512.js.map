{"version":3,"sources":["CST.js","objects/Piles.js","objects/Card.js","scenes/HudScene.js","objects/Deck.js","scenes/GameScene.js","scenes/StartScene.js","scenes/LoadScene.js","main.js"],"names":["CST","SCENES","LOAD_SCENE","START_SCENE","GAME_SCENE","HUD_SCENE","Piles","cardWidth","cardHeight","pilePositions","discard","Phaser","Math","Vector2","stock","i","Sprite","Card","GameObjects","scene","suit","value","add","existing","pile","position","flipped","setDisplaySize","setInteractive","setDepth","setPosition","x","y","match","setTexture","selectImage","input","setDraggable","Scene","HudScene","key","image","setOrigin","game","renderer","width","text","font","fill","on","pointer","setTint","clearTint","NUM_SUITS","NUM_VALUES","Deck","cards","t","push","shuffle","deal","map","card","flipBack","reposition","flip","a","length","j","floor","random","childrenArray","sort","b","currentTop","count","GameScene","launch","col","gameNumber","score","dragChildren","deck","createZones","createInputListeners","createButtons","createText","Object","keys","forEach","k","addHeight","addWidth","zone","setName","setRectangleDropZone","drawCard","gameObject","dragCardStart","dragCardEnd","dropZone","dropCard","dragX","dragY","dragCard","topCard","undefined","topCardDisc","cardStack","zoneStack","console","log","cardChildren","name","pastStackName","dropScore","topCardNew","flipScore","countCards","StartScene","load","atlas","textures","get","setVisible","setZ","setAngle","config","height","LoadScene","tileSprite","type","AUTO","Game"],"mappings":"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","file":"main.c88ff512.js","sourceRoot":"..\\src","sourcesContent":["export const CST = {\r\n    SCENES : {\r\n        LOAD_SCENE : \"LOAD_SCENE\",\r\n        START_SCENE : \"START_SCENE\",\r\n        GAME_SCENE : \"GAME_SCENE\",\r\n        HUD_SCENE : \"HUD_SCENE\"\r\n    }\r\n}","/** @type { import '/typings/phaser' } */\r\n\r\nclass Piles {\r\n    constructor() {\r\n      this.cardWidth = 72;\r\n      this.cardHeight = 96;\r\n  \r\n      this.pilePositions = {\r\n        discard: new Phaser.Math.Vector2(718, 148),\r\n        stock: new Phaser.Math.Vector2(618, 148),\r\n      };\r\n  \r\n      for (let i = 0; i < 7; i += 1) {\r\n        this.pilePositions[`tableau_${i}`] = new Phaser.Math.Vector2(\r\n            i * 80 + 236,\r\n            274\r\n        );\r\n      }\r\n  \r\n      for (let i = 0; i < 4; i += 1) {\r\n        this.pilePositions[`foundation_${i}`] = new Phaser.Math.Vector2(\r\n            i * 80 + 236,\r\n            148\r\n        );\r\n      }\r\n    }\r\n  }\r\n  \r\n  export default new Piles();","/** @type { import '/typings/phaser' } */\r\nimport Piles from \"./Piles.js\";\r\nexport default class Card extends Phaser.GameObjects.Sprite {\r\n  constructor(scene, suit, value) {\r\n    // Create sprite\r\n    super(scene, 0, 0, \"sr_cards_desktop\", \"img_card_1_0\");\r\n    scene.add.existing(this);\r\n\r\n    // Suit and Value\r\n    this.suit = suit;\r\n    this.value = value;\r\n\r\n    this.pile = \"none\";\r\n    this.position = -1;\r\n\r\n    this.flipped = false;\r\n\r\n    // Width and Height\r\n    this.setDisplaySize(Piles.cardWidth, Piles.cardHeight);\r\n\r\n    // Click event\r\n    this.setInteractive();\r\n  }\r\n\r\n  reposition(pile, position) {\r\n    this.pile = pile;\r\n    this.position = position;\r\n\r\n    this.setDepth(this.position + 10);\r\n\r\n    if (this.pile == \"stock\" || this.pile == \"discard\") {\r\n      this.setPosition(\r\n        Piles.pilePositions[this.pile].x + position * 0.2,\r\n        Piles.pilePositions[this.pile].y + position * 0.2\r\n      );\r\n    } else if (this.pile.match(/tableau_*/)) {\r\n      this.setPosition(\r\n        Piles.pilePositions[this.pile].x,\r\n        Piles.pilePositions[this.pile].y + position * 10\r\n      );\r\n    } else if (this.pile.match(/foundation_*/)) {\r\n      this.setPosition(\r\n        Piles.pilePositions[this.pile].x,\r\n        Piles.pilePositions[this.pile].y\r\n      );\r\n    }\r\n  }\r\n\r\n  flip(scene) {\r\n    this.setTexture('sr_cards_desktop', this.selectImage(this.suit, this.value));\r\n    scene.input.setDraggable(this);\r\n    this.flipped = true;\r\n  }\r\n\r\n  flipBack(scene) {\r\n    this.setTexture('sr_cards_desktop','cardback');\r\n    scene.input.setDraggable(this, false);\r\n    this.flipped = false;\r\n  }\r\n\r\n  selectImage(suit, value) {\r\n    return `img_card_${value}_${suit}`;\r\n  }\r\n}\r\n","/** @type { import '/typings/phaser' } */\r\n\r\nimport { CST } from './../CST'\r\n\r\nexport class HudScene extends Phaser.Scene{\r\n    constructor(){;\r\n        super({\r\n            key : CST.SCENES.HUD_SCENE\r\n        })\r\n    }\r\n\r\n    init(){\r\n\r\n    }\r\n\r\n    preload(){\r\n    }\r\n\r\n    create(){\r\n//#region HUD Background\r\n        this.add.image(0, 0,'atlas_sr_game_desktop', 'game_hud_bg_shadow').setOrigin(0)\r\n        .setDisplaySize(this.game.renderer.width, 54)\r\n        this.add.image(0, 0,'atlas_sr_game_desktop', 'game_hud_bg').setOrigin(0)\r\n        .setDisplaySize(this.game.renderer.width, 52)\r\n//#endregion\r\n\r\n//#region Time Counter\r\n        this.add.text(this.game.renderer.width/2 - 152, 16, \"Time\", { font: '16px Arial', fill: 'white' }); \r\n        this.add.image(this.game.renderer.width/2 - 100, 6,'atlas_sr_game_desktop', 'game_hud_container').setOrigin(0)\r\n        this.add.text(this.game.renderer.width/2 - 92, 10, \"05:00\", { font: '28px Arial', fill: 'white' }); \r\n//#endregion\r\n\r\n//#region Score\r\n        this.add.text(this.game.renderer.width/2 + 39, 16, \"Score\", { font: '16px Arial', fill: 'white' }); \r\n        this.add.image(this.game.renderer.width/2 + 100, 6,'atlas_sr_game_desktop', 'game_hud_container').setOrigin(0)\r\n        this.add.text(this.game.renderer.width/2 + 110, 10, \"0000\", { font: '28px Arial', fill: 'white' }); \r\n//#endregion\r\n\r\n//#region Score\r\n        this.add.text(this.game.renderer.width - 88, 166, \"Undo\", { font: '16px Arial', fill: 'white' }); \r\n        this.add.image(this.game.renderer.width - 100, 96,'atlas_sr_game_desktop', 'btn_undo_disabled_landscape').setOrigin(0).setInteractive()\r\n        .on('pointerdown', function (pointer) {\r\n            this.setTint(0xff0000);\r\n        })\r\n        .on('pointerout', function (pointer) {\r\n            this.clearTint();\r\n        })\r\n        .on('pointerup', function (pointer) {\r\n            this.clearTint();\r\n        })\r\n        .on('pointerover', function (pointer) {\r\n            this.setTint(0xfff000);\r\n        });  \r\n//#endregion\r\n\r\n//#region Settings Button\r\n        this.add.image(this.game.renderer.width - 100, 6,'atlas_sr_game_desktop', 'btn_end').setOrigin(0).setInteractive()\r\n        .on('pointerdown', function (pointer) {\r\n            this.setTint(0xff0000);\r\n        })\r\n        .on('pointerout', function (pointer) {\r\n            this.clearTint();\r\n        })\r\n        .on('pointerup', function (pointer) {\r\n            this.clearTint();\r\n        })\r\n        .on('pointerover', function (pointer) {\r\n            this.setTint(0xfff000);\r\n        });        \r\n        this.add.text(this.game.renderer.width - 80, 15, \"END\", { font: '22px Arial', fill: 'black' }); \r\n//#endregion\r\n    }\r\n\r\n    update(){\r\n        \r\n    }\r\n}","import Card from \"./Card.js\";\r\n\r\nconst NUM_SUITS = 4;\r\nconst NUM_VALUES = 14;\r\n\r\nexport default class Deck {\r\n  constructor(scene) {\r\n    this.cards = [];\r\n\r\n    for (let i = 0; i < NUM_SUITS; i += 1) {\r\n      for (let t = 1; t < NUM_VALUES; t += 1) {\r\n        this.cards.push(new Card(scene, i, t));\r\n      }\r\n    }\r\n\r\n    this.shuffle(this.cards);\r\n    this.deal(scene);\r\n  }\r\n\r\n  deal(scene) {\r\n    // Flip all back\r\n    this.cards.map(card => card.flipBack(scene));\r\n\r\n    // Set positions\r\n    let x = 0;\r\n    for (let i = 0; i < 7; i += 1) {\r\n      for (let t = 0; t < i + 1; t += 1) {\r\n        this.cards[x].reposition(`tableau_${i}`, t);\r\n\r\n        if (i === t) {\r\n          this.cards[x].flip(scene);\r\n        }\r\n\r\n        x += 1;\r\n      }\r\n    }\r\n\r\n    // Rest go in stack\r\n    for (let i = x; i < 52; i += 1) {\r\n      this.cards[i].reposition(\"stock\", i - x);\r\n    }\r\n  }\r\n\r\n  shuffle(a) {\r\n    for (let i = a.length - 1; i > 0; i -= 1) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [a[i], a[j]] = [a[j], a[i]];\r\n    }\r\n    return a;\r\n  }\r\n\r\n  cardChildren(card) {\r\n    const childrenArray = [];\r\n    for (let i = 0; i < this.cards.length; i += 1) {\r\n      if (\r\n        this.cards[i].pile === card.pile &&\r\n        this.cards[i].position >= card.position\r\n      ) {\r\n        childrenArray.push(this.cards[i]);\r\n      }\r\n    }\r\n\r\n    childrenArray.sort((a, b) => a.position - b.position);\r\n\r\n    return childrenArray;\r\n  }\r\n\r\n  topCard(pile) {\r\n    let currentTop = -1;\r\n    for (let i = 0; i < this.cards.length; i += 1) {\r\n      if (\r\n        this.cards[i].pile === pile &&\r\n        (currentTop === -1 ||\r\n          this.cards[i].position > this.cards[currentTop].position)\r\n      ) {\r\n        currentTop = i;\r\n      }\r\n    }\r\n    return this.cards[currentTop];\r\n  }\r\n\r\n  countCards(pile) {\r\n    let count = 0;\r\n    for (let i = 0; i < this.cards.length; i += 1) {\r\n      if (this.cards[i].pile === pile) {\r\n        count += 1;\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n}","/** @type { import '/typings/phaser' } */\r\n\r\nimport Card from \"../objects/Card\";\r\nimport { CST } from \"./../CST\";\r\nimport { HudScene } from \"./HudScene\";\r\nimport Deck from './../objects/Deck'\r\nimport Piles from './../objects/Piles'\r\n\r\nexport default class GameScene extends Phaser.Scene {\r\n  col = [];\r\n  constructor() {\r\n    super({\r\n      key: CST.SCENES.GAME_SCENE,\r\n    });\r\n  }\r\n\r\n  init() {}\r\n\r\n  preload() {\r\n    this.scene.add(CST.SCENES.HUD_SCENE, HudScene, false);\r\n    this.scene.launch(CST.SCENES.HUD_SCENE);\r\n  }\r\n\r\n  create() {\r\n    this.add.image(200, 100, \"sr_cards_desktop\", \"stackcell\").setOrigin(0);\r\n    this.add.image(280, 100, \"sr_cards_desktop\", \"stackcell\").setOrigin(0);\r\n    this.add.image(360, 100, \"sr_cards_desktop\", \"stackcell\").setOrigin(0);\r\n    this.add.image(440, 100, \"sr_cards_desktop\", \"stackcell\").setOrigin(0);\r\n\r\n    this.add.image(580, 100, \"sr_cards_desktop\", \"emptycell\").setOrigin(0);\r\n    this.add.image(670, 100, \"sr_cards_desktop\", \"emptycell\").setOrigin(0);\r\n\r\n    this.col.push(\r\n      this.add.image(200, 226, \"sr_cards_desktop\", \"emptycell\").setOrigin(0)\r\n    );\r\n    this.col.push(\r\n      this.add.image(280, 226, \"sr_cards_desktop\", \"emptycell\").setOrigin(0)\r\n    );\r\n    this.col.push(\r\n      this.add.image(360, 226, \"sr_cards_desktop\", \"emptycell\").setOrigin(0)\r\n    );\r\n    this.col.push(\r\n      this.add.image(440, 226, \"sr_cards_desktop\", \"emptycell\").setOrigin(0)\r\n    );\r\n    this.col.push(\r\n      this.add.image(520, 226, \"sr_cards_desktop\", \"emptycell\").setOrigin(0)\r\n    );\r\n    this.col.push(\r\n      this.add.image(600, 226, \"sr_cards_desktop\", \"emptycell\").setOrigin(0)\r\n    );\r\n    this.col.push(\r\n      this.add.image(680, 226, \"sr_cards_desktop\", \"emptycell\").setOrigin(0)\r\n    );\r\n\r\n    this.gameNumber = 1;\r\n    this.score = 0;\r\n    this.dragChildren = [];\r\n\r\n    // Add deck\r\n    this.deck = new Deck(this);\r\n\r\n    this.createZones();\r\n    this.createInputListeners();\r\n    this.createButtons();\r\n    this.createText();\r\n  }\r\n\r\n  createZones() {\r\n    Object.keys(Piles.pilePositions).forEach((k) => {\r\n      // Additional height for tableau\r\n      const addHeight = k.match(/tableau_*/u) ? 100 : 0;\r\n      const addWidth = k === \"stock\" ? 20 : 0;\r\n\r\n      // Make zone\r\n      const zone = this.add\r\n        .zone(\r\n          Piles.pilePositions[k].x + addWidth / 2,\r\n          Piles.pilePositions[k].y + addHeight / 2,\r\n          Piles.cardWidth + addWidth,\r\n          Piles.cardHeight + addHeight\r\n        )\r\n        .setName(k)\r\n        .setRectangleDropZone(\r\n          Piles.cardWidth + addWidth,\r\n          Piles.cardHeight + addHeight\r\n        );\r\n\r\n        //   Draw zone\r\n          if (k == \"stock\") {\r\n            zone.on(\r\n              \"pointerdown\",\r\n              function (pointer) {\r\n                this.drawCard();\r\n              },\r\n              this\r\n            );\r\n            zone.setDepth(99);\r\n          }\r\n\r\n        //   // Drop zone visual\r\n        //   this.add\r\n        //     .graphics()\r\n        //     .lineStyle(1, 0xffffff)\r\n        //     .strokeRect(\r\n        //       zone.x - Piles.cardWidth / 2 - addWidth / 2,\r\n        //       zone.y - Piles.cardHeight / 2 - addHeight / 2,\r\n        //       Piles.cardWidth,\r\n        //       Piles.cardHeight\r\n        //     );\r\n    });\r\n  }\r\n\r\n  createInputListeners() {\r\n    // Start drag card\r\n    this.input.on(\r\n      \"dragstart\",\r\n      (pointer, gameObject) =>\r\n        gameObject instanceof Card && this.dragCardStart(gameObject),\r\n      this\r\n    );\r\n\r\n    // End drag card\r\n    this.input.on(\r\n      \"dragend\",\r\n      (pointer, gameObject) => gameObject instanceof Card && this.dragCardEnd(),\r\n      this\r\n    );\r\n\r\n    // Drop on pile\r\n    this.input.on(\r\n      \"drop\",\r\n      (pointer, gameObject, dropZone) =>\r\n        gameObject instanceof Card && this.dropCard(gameObject, dropZone),\r\n      this\r\n    );\r\n\r\n    // Drag card\r\n    this.input.on(\r\n      \"drag\",\r\n      (pointer, gameObject, dragX, dragY) =>\r\n        gameObject instanceof Card && this.dragCard(gameObject, dragX, dragY),\r\n      this\r\n    );\r\n  }\r\n\r\n  createButtons() {\r\n      \r\n  }\r\n\r\n  createText() {\r\n      \r\n  }\r\n\r\n  drawCard() {\r\n      // Get top card on current stack\r\n    var topCard = this.deck.topCard('stock');\r\n    \r\n    // Empty stack\r\n    if (topCard == undefined) {\r\n      var currentTop = this.deck.topCard('discard');\r\n      var position = 0;\r\n\r\n      while (currentTop != undefined) {\r\n        currentTop.reposition('stock', position);\r\n        currentTop.flipBack(this);\r\n        position ++;\r\n        currentTop = this.deck.topCard('discard');\r\n      }\r\n      \r\n      if (position > 0) {\r\n        this.score -= 100;\r\n      }\r\n    }\r\n    else {\r\n      var topCardDisc = this.deck.topCard('discard');\r\n      if (topCardDisc != undefined) {\r\n        topCardDisc.flipBack(this);\r\n        topCard.reposition('discard', topCardDisc.position + 1);\r\n      }\r\n      else {\r\n        topCard.reposition('discard', 0);\r\n      }\r\n      topCard.flip(this);\r\n    }\r\n  }\r\n\r\n  flipScore(cardStack) {\r\n    if (cardStack.match(/tableau_*/u)) {\r\n      this.score += 5;\r\n    }\r\n  }\r\n\r\n  dropScore(zoneStack, cardStack) {\r\n    console.log(\" Moved: \" + cardStack + \" to \" + zoneStack);\r\n    \r\n    // Waste to tableau\r\n    if(cardStack == 'discard' && zoneStack.match(/tableau_*/)) { \r\n      this.score += 5;\r\n    }\r\n    \r\n    // Waste to foundation\r\n    else if(cardStack == 'discard' && zoneStack.match(/foundation_*/)) { \r\n      this.score += 10;\r\n    }\r\n    \r\n    // Tableau to foundation\r\n    else if(cardStack.match(/tableau_*/) && zoneStack.match(/foundation_*/)) { \r\n      this.score += 10;\r\n    }\r\n\r\n    // Foundation to tableau\r\n    else if(cardStack.match(/foundation_*/) && zoneStack.match(/tableau_*/)) { \r\n      this.score -= 15;\r\n    }\r\n  }\r\n\r\n  // Drag card start\r\n  dragCardStart(card) {\r\n    // Populate drag children\r\n    this.dragChildren = [];\r\n    if (card.pile.match(/tableau_*/)) {\r\n      this.dragChildren = this.deck.cardChildren(card);\r\n    }\r\n    else {\r\n      this.dragChildren.push(card);\r\n    }\r\n    \r\n    // Set depths\r\n    for (var i = 0; i < this.dragChildren.length; i++) {\r\n      this.dragChildren[i].setDepth(100 + i);\r\n    }\r\n  }\r\n\r\n  // Drag card end\r\n  dragCardEnd() {\r\n    // Drop all other cards on top\r\n    for (var i = 0; i < this.dragChildren.length; i++) {\r\n      this.dragChildren[i].reposition(this.dragChildren[i].pile, this.dragChildren[i].position);\r\n    }\r\n  }\r\n  \r\n  // Drag card\r\n  dragCard(card, dragX, dragY) {\r\n    // Set positions\r\n    for (var i = 0; i < this.dragChildren.length; i++) {\r\n      this.dragChildren[i].x  = dragX;\r\n      this.dragChildren[i].y  = dragY + i * 16;\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line\r\n  dropCard(card, dropZone) {\r\n    var topCard = this.deck.topCard(dropZone.name);\r\n    \r\n    // Keep old stack name\r\n    var pastStackName = card.pile;\r\n    \r\n    // Empty stack\r\n    if (topCard == undefined) {\r\n      if(dropZone.name.match(/tableau_*/)) {\r\n        if (card.value == 13) {\r\n          this.dropScore(dropZone.name, card.pile);\r\n          card.reposition(dropZone.name, 0);\r\n        }\r\n      }\r\n      else if(dropZone.name.match(/foundation_*/)) {\r\n        if (card.value == 1) {\r\n          this.dropScore(dropZone.name, card.pile);\r\n          card.reposition(dropZone.name, 0);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Tableau\r\n    else if (dropZone.name.match(/tableau_*/)) {\r\n      if ((card.suit + 1) % 2 == topCard.suit % 2 && \r\n           card.value == topCard.value - 1) {\r\n        this.dropScore(dropZone.name, card.pile);\r\n        card.reposition(dropZone.name, topCard.position + 1);\r\n      }\r\n    }\r\n    \r\n    // Foundation\r\n    else if (dropZone.name.match(/foundation_*/)) {\r\n      if (card.suit == topCard.suit && \r\n          card.value == topCard.value + 1) {\r\n        this.dropScore(dropZone.name, card.pile);\r\n        card.reposition(dropZone.name, topCard.position + 1);\r\n      }\r\n    }\r\n    \r\n    // Drop all other cards on top\r\n    for (var i = 0; i < this.dragChildren.length; i++) {\r\n      if (this.dragChildren[i] != card) {\r\n        this.dragChildren[i].reposition(card.pile, card.position + i);\r\n      }\r\n    }\r\n    \r\n    // Flip top card on past stack\r\n    var topCardNew = this.deck.topCard(pastStackName);\r\n    if (topCardNew != undefined && topCardNew != card && !topCardNew.flipped) {\r\n      topCardNew.flip(this);\r\n      this.flipScore(topCardNew.pile);\r\n    }\r\n  }\r\n\r\n  update() {\r\n    // Ensure score is within range\r\n    if (this.score < 0) {\r\n      this.score = 0;\r\n    }\r\n\r\n    // Win\r\n    if (\r\n      this.deck.countCards(\"foundation_0\") +\r\n        this.deck.countCards(\"foundation_1\") +\r\n        this.deck.countCards(\"foundation_2\") +\r\n        this.deck.countCards(\"foundation_3\") ==\r\n      52\r\n    ) {\r\n\r\n    }\r\n  }\r\n}\r\n","/** @type { import '/typings/phaser' } */\r\n\r\nimport { CST } from './../CST'\r\nimport GameScene from './GameScene'\r\n\r\nexport class StartScene extends Phaser.Scene{\r\n    constructor(){\r\n        super({\r\n            key : CST.SCENES.START_SCENE\r\n        })\r\n    }\r\n\r\n    init(){\r\n\r\n    }\r\n\r\n    preload(){\r\n        this.load.atlas(\r\n          \"sr_cards_desktop\",\r\n          \"images/sr_cards_desktop.png\",\r\n          \"images/sr_cards_desktop.json\"\r\n        );\r\n        this.load.atlas('atlas_sr_game_desktop', 'images/atlas_sr_game_desktop.png', 'images/atlas_sr_game_desktop.json')\r\n    }\r\n\r\n    create(){\r\n        var atlasTexture = this.textures.get('atlas_sr_game_desktop');\r\n\r\n        this.add.image(450, 80,'atlas_sr_game_desktop', 'sr_logo').setOrigin(0);\r\n        this.add.image(510, 174,'atlas_sr_game_desktop', 'sr_logo_r_glow').setOrigin(0);\r\n        this.add.image(590, 174,'atlas_sr_game_desktop', 'sr_logo_u_glow').setOrigin(0);\r\n        this.add.image(666, 174,'atlas_sr_game_desktop', 'sr_logo_s_glow').setOrigin(0);\r\n        this.add.image(736, 174,'atlas_sr_game_desktop', 'sr_logo_h_glow').setOrigin(0);\r\n\r\n//#region Settings Button\r\n        this.add.image(this.game.renderer.width - 60, 10,'atlas_sr_game_desktop', 'btn_settings').setOrigin(0).setInteractive()\r\n        .on('pointerdown', function (pointer) {\r\n            this.setTint(0xff0000);\r\n        })\r\n        .on('pointerout', function (pointer) {\r\n            this.clearTint();\r\n        })\r\n        .on('pointerup', function (pointer) {\r\n            this.clearTint();\r\n        })\r\n        .on('pointerover', function (pointer) {\r\n            this.setTint(0xfff000);\r\n        });\r\n        \r\n//#endregion\r\n        \r\n//#region Start Game Button\r\n        this.add.image(570, 290,'atlas_sr_game_desktop', 'btn_gold').setOrigin(0).setInteractive()\r\n        .on('pointerdown', function (pointer) {\r\n            this.setTint(0xff0000);\r\n            \r\n            this.scene.scene.setVisible(false, CST.SCENES.START_SCENE);\r\n\r\n            this.scene.scene.add(CST.SCENES.GAME_SCENE, GameScene, false)\r\n            this.scene.scene.launch(CST.SCENES.GAME_SCENE)\r\n        })\r\n        .on('pointerout', function (pointer) {\r\n            this.clearTint();\r\n        })\r\n        .on('pointerup', function (pointer) {\r\n            this.clearTint();\r\n        })\r\n        .on('pointerover', function (pointer) {\r\n            this.setTint(0xfff000);\r\n        });\r\n        this.add.text(610, 308, \"START\", { font: '36px Arial', fill: 'rgb(57 51 26)' });\r\n//#endregion\r\n\r\n//#region How to play Button\r\n        this.add.image(570, 370,'atlas_sr_game_desktop', 'btn_blue').setOrigin(0).setInteractive()\r\n        .on('pointerdown', function (pointer) {\r\n            this.setTint(0xff0000);\r\n        })\r\n        .on('pointerout', function (pointer) {\r\n            this.clearTint();\r\n        })\r\n        .on('pointerup', function (pointer) {\r\n            this.clearTint();\r\n        })\r\n        .on('pointerover', function (pointer) {\r\n            this.setTint(0xfff000);\r\n        });\r\n        this.add.text(585, 390, \"How to Play\", { font: '30px Arial', fill: 'white' }); \r\n//#endregion\r\n        \r\n        this.add.image(90, 114,'atlas_sr_game_desktop', 'start_cards_fx').setOrigin(0);\r\n        \r\n        this.add.image(475, 474,'atlas_sr_game_desktop', 'start_cards_diamonds').setZ(0).setOrigin(0.5).setAngle(42);\r\n        this.add.image(410, 414,'atlas_sr_game_desktop', 'start_cards_clubs').setZ(0).setOrigin(0.5).setAngle(16);\r\n        this.add.image(320, 374,'atlas_sr_game_desktop', 'start_cards_hearts').setZ(0).setOrigin(0.5).setAngle(-4);\r\n        this.add.image(202, 374,'atlas_sr_game_desktop', 'start_cards_spades').setZ(0).setOrigin(0.5).setAngle(-20);\r\n    }\r\n\r\n    update(){\r\n        \r\n    }\r\n}","/** @type { import '/typings/phaser' } */\r\n\r\nimport { CST } from '../CST'\r\nimport { StartScene } from './StartScene'\r\n\r\nconst config = {\r\n    width: 960,\r\n    height: 600\r\n};\r\n\r\nexport class LoadScene extends Phaser.Scene{\r\n    constructor(){\r\n        super({\r\n            key : CST.SCENES.LOAD_SCENE\r\n        })\r\n    }\r\n\r\n    init(){\r\n\r\n    }\r\n\r\n    preload(){\r\n        this.load.image('bg_desktop', 'images/bg_desktop.png');\r\n        this.load.image('bg_tile', 'images/bg_tile.png');\r\n        this.load.image('bg_overlay', 'images/bg_overlay.png');\r\n    }\r\n\r\n    create(){\r\n        this.add.tileSprite(0, 0, config.width*2, config.height*2, \"bg_tile\").setOrigin(0);    \r\n        this.add.image(config.width/2, config.height/2, \"bg_overlay\").setDisplaySize(config.width,config.height)\r\n\r\n        this.scene.add(CST.SCENES.START_SCENE, StartScene, false)\r\n        this.scene.launch(CST.SCENES.START_SCENE)\r\n    }\r\n}","/** @type { import '/typings/phaser' } */\r\n\r\nimport { LoadScene } from './scenes/LoadScene'\r\n\r\nconst config = {\r\n    type: Phaser.AUTO,\r\n    width: 960,\r\n    height: 600,\r\n    scene: [LoadScene]\r\n};\r\n\r\nlet game = new Phaser.Game(config);"]}